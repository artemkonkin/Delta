@model IQueryable<DirectoryDomain.DirectoriesList>

@{
    ViewBag.Title = "Directory layouts";
    Layout = "_Layout";
}
<style type="text/css">
    .hover { }

    .focus { }

    .md { }
</style>

<div id="directoriesListViewModel">

    <h3 class="text-4xl font-bold dark:text-white"> @ViewBag.Title </h3>
    
    <!-- Create -->
    <div class="offcanvas offcanvas-end fixed bottom-0 flex flex-col max-w-full 
     bg-white invisible bg-clip-padding shadow-sm outline-none transition duration-300 
     ease-in-out text-gray-700 top-0 right-0 border-none w-96"
         tabindex="-1"
         id="create"
         aria-labelledby="createLabel">

        <div class="offcanvas-header flex items-center justify-between p-4">
            <h5 class="offcanvas-title mb-0 leading-normal font-semibold" id="createLabel">
                Create
            </h5>
            <button type="button" class="btn-close box-content w-4 
                h-4 p-2 -my-5 -mr-2 text-black border-none rounded-none opacity-50 
                focus:shadow-none focus:outline-none focus:opacity-100 hover:text-black 
                hover:opacity-75 hover:no-underline"
                    data-bs-dismiss="offcanvas"
                    aria-label="Close">
            </button>
        </div>

        <div class="offcanvas-body flex-grow p-4 overflow-y-auto">
            <input type="text" class="form-control block w-full px-3 py-1.5 text-base font-normal 
                   text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded 
                   transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                   id=""
                   placeholder="Name"
                   v-model="directoryName">
            <button type="submit" class=" w-full mt-6 px-6 py-2.5 bg-blue-600 text-white font-medium text-xs 
                    leading-tight uppercase rounded shadow-md hover:bg-blue-700 hover:shadow-lg 
                    focus:bg-blue-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 
                    active:shadow-lg transition duration-150 ease-in-out"
                    v-on:click="createDirectoryList()"
                    data-bs-dismiss="offcanvas">
                Create
            </button>
        </div>
    </div>
    
    <!-- Edit -->
    <div class="offcanvas offcanvas-end fixed bottom-0 flex flex-col max-w-full 
     bg-white invisible bg-clip-padding shadow-sm outline-none transition duration-300 
     ease-in-out text-gray-700 top-0 right-0 border-none w-96"
         tabindex="-1"
         id="edit"
         aria-labelledby="editLabel">

        <div class="offcanvas-header flex items-center justify-between p-4">
            <h5 class="offcanvas-title mb-0 leading-normal font-semibold" id="editLabel">
                Edit
            </h5>
            <button type="button" class="btn-close box-content w-4 
                h-4 p-2 -my-5 -mr-2 text-black border-none rounded-none opacity-50 
                focus:shadow-none focus:outline-none focus:opacity-100 hover:text-black 
                hover:opacity-75 hover:no-underline"
                    data-bs-dismiss="offcanvas"
                    aria-label="Close">
            </button>
        </div>

        <div class="offcanvas-body flex-grow p-4 overflow-y-auto">
            <input type="text" class="form-control block w-full px-3 py-1.5 text-base font-normal 
                   text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded 
                   transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                   id=""
                   placeholder="Name"
                   v-model="editDirectoriesListData.name">
            <button type="submit" class=" w-full mt-6 px-6 py-2.5 bg-blue-600 text-white font-medium text-xs 
                    leading-tight uppercase rounded shadow-md hover:bg-blue-700 hover:shadow-lg 
                    focus:bg-blue-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 
                    active:shadow-lg transition duration-150 ease-in-out"
                    v-on:click="editDirectoriesList()"
                    data-bs-dismiss="offcanvas">
                Save changes
            </button>
        </div>
    </div>

    <!-- Table -->
    <div class="relative overflow-x-auto shadow-md sm:rounded-lg w-full">

        <div class="p-4">
            <div class="flex w-full flex-row">
                <button class="inline-block px-6 py-2.5 bg-blue-600 text-white font-medium text-xs leading-tight uppercase 
                        rounded shadow-md hover:bg-blue-700 hover:shadow-lg focus:bg-blue-700 focus:shadow-lg  
                        focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg transition duration-150 ease-in-out mr-1.5"
                        type="button"
                        data-bs-toggle="offcanvas"
                        data-bs-target="#create"
                        aria-controls="create">
                    Create
                </button>
            </div>
            <label for="table-search" class="sr-only">Search</label>
            <div class="relative mt-1">
                <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                    <svg class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <input type="text" id="table-search"
                       class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg 
                       focus:ring-blue-500 focus:border-blue-500 block w-80 pl-10 p-2.5  dark:bg-gray-700 
                       dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                       placeholder="Search for items">
            </div>
        </div>

        <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
            @*HEAD*@
            <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
                <th scope="col" class="px-6 py-3">
                    Id
                </th>
                <th scope="col" class="px-6 py-3">
                    Name
                </th>
                <th scope="col" class="px-6 py-3">
                    <span class="sr-only">Edit</span>
                </th>
            </tr>
            </thead>
            @*BODY*@
            <tbody>
            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600"
                v-for="(item, index) in data" :key="index">
                <th scope="row" class="px-6 py-4 font-medium text-gray-900 dark:text-white whitespace-nowrap">
                    {{ index }}
                </th>
                <th scope="row" class="px-6 py-4 font-medium text-gray-900 dark:text-white whitespace-nowrap">
                    {{ item.id }}
                </th>
                <td class="px-6 py-4">
                    {{ item.name }}
                </td>
                <td class="px-6 py-4 text-right">
                    <a data-bs-toggle="offcanvas"
                       data-bs-target="#edit"
                       aria-controls="edit" class="font-medium text-blue-600 hover:underline dark:text-blue-500"
                       v-on:click="saveEditedData(item)">
                        Edit |
                    </a>
                    <a href="#" class="font-medium text-blue-600 hover:underline dark:text-blue-500">Open |</a>
                    <a href="#" class="font-medium text-blue-600 hover:underline dark:text-blue-500"
                       v-on:click="deleteDirectoriesList(item)">
                        Delete
                    </a>
                </td>
            </tr>
            </tbody>
        </table>
    </div>
</div>

<div>

    <div id="counter">
        Счётчик: {{ counter }}
    </div>

    <div id="bind-attribute">
        <span v-bind:title="message">
            Наведи на меня курсор на пару секунд, чтобы
            увидеть динамически связанное значение title!
        </span>
    </div>

    <div id="event-handling">
        <p>{{ message }}</p>
        <button v-on:click="reverseMessage">Перевернуть сообщение</button>
    </div>

    <div id="two-way-binding">
        <p>{{ message }}</p>
        <input v-model="message"/>
    </div>

    <div id="conditional-rendering">
        <span v-if="seen">Сейчас меня видно</span>
    </div>

    <div id="list-rendering">
        <ol>
            <li v-for="todo in todos">
                {{ todo.text }}
            </li>
        </ol>
    </div>

    <div id="todo-list-app">
        <ol>
            <!--
            Теперь можно передавать каждому компоненту todo-item объект с информацией
            о задаче, который может динамически изменяться. Также каждому компоненту
            определяем "key", назначение которого разберём далее в руководстве.
            -->
            <todo-item
                v-for="item in groceryList"
                v-bind:todo="item"
                v-bind:key="item.id">
            </todo-item>
        </ol>
    </div>

    <ul id="array-rendering">
        <li v-for="item in items">
            {{ item.message }}
        </li>
    </ul>

    <div id="inline-handler">
        <button v-on:click="say('hi')">Скажи hi</button>
        <button v-on:click="say('what')">Скажи what</button>
    </div>

    <div id="v-model-basic" class="demo">
        <input v-model="message" placeholder="edit me"/>
        <p>Message is: {{ message }}</p>
    </div>

    <div id="v-model-multiple-checkboxes">
        <input type="checkbox" id="jack" value="Джек" v-model="checkedNames"/>
        <label for="jack">Джек</label>
        <input type="checkbox" id="john" value="Джон" v-model="checkedNames"/>
        <label for="john">Джон</label>
        <input type="checkbox" id="mike" value="Майк" v-model="checkedNames"/>
        <label for="mike">Майк</label>
        <br/>
        <span>Отмеченные имена: {{ checkedNames }}</span>
    </div>

</div>

<script>

    // Directory list vm
    const DirectoriesList = {
        data() {
            return {
                directoryList: [],
                data: {},
                directoryName: "",
                editDirectoriesListData: {}
            };
        },
        mounted() {
            window.axios.get("/Directory/GetDirectoriesLists")
                .then((response) => {
                    this.data = Object.assign({}, response.data);
                });
        },
        methods: {

            // GET
            getDirectoriesLists() {
                window.axios.get("/Directory/GetDirectoriesLists")
                    .then((response) => {
                        this.data = Object.assign({}, response.data);
                    });
            },

            // CREATE
            createDirectoriesList() {
                window.axios({
                    method: 'POST',
                    url: '/Directory/CreateDirectoriesList',
                    params: { directoryListName: this.directoryName }
                }).then((response) => {
                    console.log(response.data);
                    this.getDirectoriesLists();
                });
            },

            // DELETE
            deleteDirectoriesList(item) {
                window.axios({
                    method: 'POST',
                    url: '/Directory/DeleteDirectoriesList',
                    params: { guid: item.id }
                }).then((response) => {
                    console.log(response.data);
                    this.getDirectoriesLists();
                });
            },

            // EDIT
            saveEditedData(item) {
                this.editDirectoriesListData = item;
            },

            editDirectoriesList() {
                window.axios({
                    method: 'POST',
                    url: '/Directory/EditDirectoriesList',
                    params: this.editDirectoriesListData
                }).then((response) => {
                    console.log(response.data);
                    this.getDirectoriesLists();
                    this.editDirectoriesListData = {};
                });
            }

        }
    };

    Vue.createApp(DirectoriesList).mount('#directoriesListViewModel');

</script>

<script>

    // Another
    Vue.createApp({
        data() {
            return {
                checkedNames: []
            };
        }
    }).mount('#v-model-multiple-checkboxes');

    const Counter = {
        data() {
            return {
                counter: 0
            };
        },
        mounted() {
            setInterval(() => {
                    this.counter++;
                },
                1000);
        }
    };
    Vue.createApp(Counter).mount('#counter');

    const AttributeBinding = {
        data() {
            return {
                message: 'Страница загружена ' + new Date().toLocaleString()
            };
        }
    };
    Vue.createApp(AttributeBinding).mount('#bind-attribute');

    const EventHandling = {
        data() {
            return {
                message: 'Привет, Vue.js!'
            };
        },
        methods: {
            reverseMessage() {
                this.message = this.message
                    .split('')
                    .reverse()
                    .join('');
            }
        }
    };
    Vue.createApp(EventHandling).mount('#event-handling');

    const TwoWayBinding = {
        data() {
            return {
                message: 'Привет, Vue!'
            };
        }
    };
    Vue.createApp(TwoWayBinding).mount('#two-way-binding');

    const ConditionalRendering = {
        data() {
            return {
                seen: true
            };
        }
    };
    Vue.createApp(ConditionalRendering).mount('#conditional-rendering');

    const ListRendering = {
        data() {
            return {
                todos: [
                    { text: 'Learn JavaScript' },
                    { text: 'Learn Vue' },
                    { text: 'Build something awesome' }
                ]
            };
        }
    };
    Vue.createApp(ListRendering).mount('#list-rendering');

    const TodoItem = {
        props: ['todo'],
        template: `<li>{{ todo.text }}</li>`
    };

    const TodoList = {
        data() {
            return {
                groceryList: [
                    { id: 0, text: 'Vegetables' },
                    { id: 1, text: 'Cheese' },
                    { id: 2, text: 'Whatever else humans are supposed to eat' }
                ]
            };
        },
        components: {
            TodoItem
        }
    };

    const app = Vue.createApp(TodoList);

    app.mount('#todo-list-app');

    Vue.createApp({
        data() {
            return {
                items: [
                    { message: 'Foo' },
                    { message: 'Bar' }
                ]
            };
        }
    }).mount('#array-rendering');

    Vue.createApp({
        methods: {
            say(message) {
                alert(message);
            }
        }
    }).mount('#inline-handler');

    Vue.createApp({
        data() {
            return {
                message: ''
            };
        }
    }).mount('#v-model-basic');
</script>