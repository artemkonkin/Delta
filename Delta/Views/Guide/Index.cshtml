@model IQueryable<GuideDomain.GuidesList>

@{
    ViewBag.Title = "Guide layouts";
    Layout = "_Layout";
}

<h3 class="text-4xl font-bold dark:text-white"> @ViewBag.Title </h3>

<div class="relative overflow-x-auto shadow-md sm:rounded-lg w-full">

    <div class="p-4">
        <div class="flex w-full flex-row">
            <button class="block text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button" data-modal-toggle="guide-list-modal">
                Add
            </button>
        </div>
        <label for="table-search" class="sr-only">Search</label>
        <div class="relative mt-1">
            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <svg class="w-5 h-5 text-gray-500 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path>
                </svg>
            </div>
            <input type="text" id="table-search" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-80 pl-10 p-2.5  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Search for items">
        </div>
    </div>


    <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
        @*HEAD*@
        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
        <tr>
            <th scope="col" class="px-6 py-3">
                Id
            </th>
            <th scope="col" class="px-6 py-3">
                Name
            </th>
            <th scope="col" class="px-6 py-3">
                <span class="sr-only">Edit</span>
            </th>
        </tr>
        </thead>
        @*BODY*@
        <tbody>
        @foreach (var guideList in Model)
        {
            <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                <th scope="row" class="px-6 py-4 font-medium text-gray-900 dark:text-white whitespace-nowrap">
                    @guideList.Id
                </th>
                <td class="px-6 py-4">
                    @guideList.Name
                </td>
                <td class="px-6 py-4 text-right">
                    <a href="#" class="font-medium text-blue-600 hover:underline dark:text-blue-500">Open |</a>
                    <a href="#" class="font-medium text-blue-600 hover:underline dark:text-blue-500">Edit |</a>
                    <a href="#" class="font-medium text-blue-600 hover:underline dark:text-blue-500">Delete</a>
                </td>
            </tr>
        }
        </tbody>

    </table>

</div>

<!-- Main modal -->
<div id="guide-list-modal" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 w-full md:inset-0 h-modal md:h-full">
    <div class="relative p-4 w-full max-w-2xl h-full md:h-auto">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
            <!-- Modal header -->
            <div class="flex justify-between items-start p-4 rounded-t border-b dark:border-gray-600">
                <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                    Add guide list
                </h3>
                <p>{{guideName}}</p>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-toggle="defaultModal">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
            </div>
            <!-- Modal body -->
            <div class="p-6 space-y-6">
                <div class="mb-6">
                    <label for="base-input" class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300">Guide name</label>
                    <input type="text" id="base-input" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                           v-model="message">
                </div>
            </div>
            <!-- Modal footer -->
            <div class="flex items-center p-6 space-x-2 rounded-b border-t border-gray-200 dark:border-gray-600">
                <button
                    data-modal-toggle="guide-list-modal"
                    type="button"
                    class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                    v-on:click="">
                    Save
                </button>
                <button
                    data-modal-toggle="guide-list-modal"
                    type="button"
                    class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600"
                    v-on:click="">
                    Decline
                </button>
            </div>
        </div>
    </div>
</div>

<div id="counter">
    Счётчик: {{ counter }}
</div>

<div id="bind-attribute">
    <span v-bind:title="message">
        Наведи на меня курсор на пару секунд, чтобы
        увидеть динамически связанное значение title!
    </span>
</div>

<div id="event-handling">
    <p>{{ message }}</p>
    <button v-on:click="reverseMessage">Перевернуть сообщение</button>
</div>

<div id="two-way-binding">
    <p>{{ message }}</p>
    <input v-model="message"/>
</div>

<div id="conditional-rendering">
    <span v-if="seen">Сейчас меня видно</span>
</div>

<div id="list-rendering">
    <ol>
        <li v-for="todo in todos">
            {{ todo.text }}
        </li>
    </ol>
</div>

<div id="todo-list-app">
    <ol>
        <!--
        Теперь можно передавать каждому компоненту todo-item объект с информацией
        о задаче, который может динамически изменяться. Также каждому компоненту
        определяем "key", назначение которого разберём далее в руководстве.
        -->
        <todo-item
            v-for="item in groceryList"
            v-bind:todo="item"
            v-bind:key="item.id">
        </todo-item>
    </ol>
</div>

<ul id="array-rendering">
    <li v-for="item in items">
        {{ item.message }}
    </li>
</ul>

<div id="inline-handler">
    <button v-on:click="say('hi')">Скажи hi</button>
    <button v-on:click="say('what')">Скажи what</button>
</div>

<div id="v-model-basic" class="demo">
    <input v-model="message" placeholder="edit me"/>
    <p>Message is: {{ message }}</p>
</div>

<div id="v-model-multiple-checkboxes">
    <input type="checkbox" id="jack" value="Джек" v-model="checkedNames"/>
    <label for="jack">Джек</label>
    <input type="checkbox" id="john" value="Джон" v-model="checkedNames"/>
    <label for="john">Джон</label>
    <input type="checkbox" id="mike" value="Майк" v-model="checkedNames"/>
    <label for="mike">Майк</label>
    <br/>
    <span>Отмеченные имена: {{ checkedNames }}</span>
</div>

<div id="guide-list-test">
    <p>
        {{ data.login }}
        {{ data.id }}
        {{ data.avatar_url }}
    </p>
</div>

<script>

    const GuideList = {
        data() {
            return {
                guideList: [],
                data: {}
            };
        },
        mounted() {
            window.axios.get("https://api.github.com/users/mapbox")
                .then((response) => {
                    this.data = response.data;
                });
        }
    };
    Vue.createApp(GuideList).mount('#guide-list-test');

    Vue.createApp({
        data() {
            return {
                checkedNames: []
            };
        },
        methods: {
        }
    }).mount('#guide-list-modal');

    Vue.createApp({
        data() {
            return {
                checkedNames: []
            };
        }
    }).mount('#v-model-multiple-checkboxes');

    const Counter = {
        data() {
            return {
                counter: 0
            };
        },
        mounted() {
            setInterval(() => {
                    this.counter++;
                },
                1000);
        }
    };
    Vue.createApp(Counter).mount('#counter');

    const AttributeBinding = {
        data() {
            return {
                message: 'Страница загружена ' + new Date().toLocaleString()
            };
        }
    };
    Vue.createApp(AttributeBinding).mount('#bind-attribute');

    const EventHandling = {
        data() {
            return {
                message: 'Привет, Vue.js!'
            };
        },
        methods: {
            reverseMessage() {
                this.message = this.message
                    .split('')
                    .reverse()
                    .join('');
            }
        }
    };
    Vue.createApp(EventHandling).mount('#event-handling');

    const TwoWayBinding = {
        data() {
            return {
                message: 'Привет, Vue!'
            };
        }
    };
    Vue.createApp(TwoWayBinding).mount('#two-way-binding');

    const ConditionalRendering = {
        data() {
            return {
                seen: true
            };
        }
    };
    Vue.createApp(ConditionalRendering).mount('#conditional-rendering');

    const ListRendering = {
        data() {
            return {
                todos: [
                    { text: 'Learn JavaScript' },
                    { text: 'Learn Vue' },
                    { text: 'Build something awesome' }
                ]
            };
        }
    };
    Vue.createApp(ListRendering).mount('#list-rendering');

    const TodoItem = {
        props: ['todo'],
        template: `<li>{{ todo.text }}</li>`
    };

    const TodoList = {
        data() {
            return {
                groceryList: [
                    { id: 0, text: 'Vegetables' },
                    { id: 1, text: 'Cheese' },
                    { id: 2, text: 'Whatever else humans are supposed to eat' }
                ]
            };
        },
        components: {
            TodoItem
        }
    };

    const app = Vue.createApp(TodoList);

    app.mount('#todo-list-app');

    Vue.createApp({
        data() {
            return {
                items: [
                    { message: 'Foo' },
                    { message: 'Bar' }
                ]
            };
        }
    }).mount('#array-rendering');

    Vue.createApp({
        methods: {
            say(message) {
                alert(message);
            }
        }
    }).mount('#inline-handler');

    Vue.createApp({
        data() {
            return {
                message: ''
            };
        }
    }).mount('#v-model-basic');

</script>